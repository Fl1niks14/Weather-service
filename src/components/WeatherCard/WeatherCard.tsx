import React, { useEffect, useState } from 'react'
import { getWeather } from '../api/weather'
import styles from './WeatherCard.module.css'

interface Props {
	lat: number
	lon: number
	onTimeUpdate: (nowDt: string, timezone: string) => void
}

const WeatherCard: React.FC<Props> = ({ lat, lon, onTimeUpdate }) => {
	const [weather, setWeather] = useState<any | null>(null)
	const [error, setError] = useState<string | null>(null)

	useEffect(() => {
		const fetchData = async () => {
			try {
				const data = await getWeather(lat, lon)
				setWeather(data)
				onTimeUpdate((data as any).now_dt, (data as any).info.tzinfo.name)
			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ API:', err)
				setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã')
			}
		}

		fetchData()
	}, [lat, lon, onTimeUpdate])

	if (error) return <div className={styles.card}>{error}</div>
	if (!weather || !weather.fact)
		return <div className={styles.card}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>

	const {
		temp,
		condition,
		feels_like,
		pressure_mm,
		humidity,
		wind_speed,
		icon
	} = weather.fact

	const date = new Date(weather.now_dt).toLocaleDateString('ru-RU', {
		weekday: 'long',
		day: 'numeric',
		month: 'long'
	})

	return (
		<div className={styles.card}>
			<div className={styles.left}>
				<div>
					<p className={styles.date}>{date}</p>
					<p className={styles.temp}>{temp}¬∞C</p>
				</div>

				<ul className={styles.details}>
					<li>üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å</li>
					<li>üß≠ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure_mm} –º–º</li>
					<li>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%</li>
					<li>üå§ –ü–æ–≥–æ–¥–∞: {translateCondition(condition)}</li>
				</ul>
				<p className={styles.feels}>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C</p>
				<img
					src={`https://yastatic.net/weather/i/icons/funky/dark/${icon}.svg`}
					alt={condition}
					className={styles.icon}
				/>
			</div>
		</div>
	)
}

function translateCondition(code: string): string {
	const map: Record<string, string> = {
		clear: '–Ø—Å–Ω–æ',
		partly_cloudy: '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ',
		cloudy: '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
		overcast: '–ü–∞—Å–º—É—Ä–Ω–æ',
		drizzle: '–ú–æ—Ä–æ—Å—å',
		light_rain: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
		rain: '–î–æ–∂–¥—å',
		moderate_rain: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
		heavy_rain: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
		showers: '–õ–∏–≤–µ–Ω—å',
		snow: '–°–Ω–µ–≥',
		light_snow: '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
		snow_showers: '–°–Ω–µ–≥–æ–ø–∞–¥',
		thunderstorm: '–ì—Ä–æ–∑–∞'
	}
	return map[code] || code
}

export default WeatherCard
